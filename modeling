#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <OpenMesh/Core/IO/MeshIO.hh>
#include <OpenMesh/Core/Mesh/TriMesh_ArrayKernelT.hh>
#include <iostream>

// Definir el tipo de malla
typedef OpenMesh::TriMesh_ArrayKernelT<> MyMesh;

// Variables globales
MyMesh mesh;
GLuint vao, vbo;

// Función para inicializar la malla
void initializeMesh() {
    // Añadir vértices
    MyMesh::VertexHandle vhandle[8];
    vhandle[0] = mesh.add_vertex(MyMesh::Point(-1, -1,  1));
    vhandle[1] = mesh.add_vertex(MyMesh::Point( 1, -1,  1));
    vhandle[2] = mesh.add_vertex(MyMesh::Point( 1,  1,  1));
    vhandle[3] = mesh.add_vertex(MyMesh::Point(-1,  1,  1));
    vhandle[4] = mesh.add_vertex(MyMesh::Point(-1, -1, -1));
    vhandle[5] = mesh.add_vertex(MyMesh::Point( 1, -1, -1));
    vhandle[6] = mesh.add_vertex(MyMesh::Point( 1,  1, -1));
    vhandle[7] = mesh.add_vertex(MyMesh::Point(-1,  1, -1));

    // Añadir caras
    mesh.add_face(vhandle[0], vhandle[1], vhandle[2]);
    mesh.add_face(vhandle[0], vhandle[2], vhandle[3]);
    mesh.add_face(vhandle[4], vhandle[5], vhandle[6]);
    mesh.add_face(vhandle[4], vhandle[6], vhandle[7]);
    mesh.add_face(vhandle[0], vhandle[1], vhandle[5]);
    mesh.add_face(vhandle[0], vhandle[5], vhandle[4]);
    mesh.add_face(vhandle[2], vhandle[3], vhandle[7]);
    mesh.add_face(vhandle[2], vhandle[7], vhandle[6]);
    mesh.add_face(vhandle[1], vhandle[2], vhandle[6]);
    mesh.add_face(vhandle[1], vhandle[6], vhandle[5]);
    mesh.add_face(vhandle[3], vhandle[0], vhandle[4]);
    mesh.add_face(vhandle[3], vhandle[4], vhandle[7]);
}

// Función para inicializar OpenGL
void initializeOpenGL() {
    // Crear VAO y VBO
    glGenVertexArrays(1, &vao);
    glGenBuffers(1, &vbo);

    glBindVertexArray(vao);

    // Obtener los puntos de la malla
    std::vector<float> vertices;
    for (const auto& vh : mesh.vertices()) {
        auto point = mesh.point(vh);
        vertices.push_back(point[0]);
        vertices.push_back(point[1]);
        vertices.push_back(point[2]);
    }

    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(float), vertices.data(), GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);
}

// Renderizar la malla
void renderMesh() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glBindVertexArray(vao);
    glDrawArrays(GL_TRIANGLES, 0, mesh.n_vertices());
    glBindVertexArray(0);
}

// Función principal
int main() {
    // Inicializar GLFW
    if (!glfwInit()) {
        std::cerr << "Error al inicializar GLFW" << std::endl;
        return -1;
    }

    GLFWwindow* window = glfwCreateWindow(800, 600, "Modelado 3D", nullptr, nullptr);
    if (!window) {
        std::cerr << "Error al crear la ventana" << std::endl;
        glfwTerminate();
        return -1;
    }

    glfwMakeContextCurrent(window);
    glewExperimental = GL_TRUE;

    if (glewInit() != GLEW_OK) {
        std::cerr << "Error al inicializar GLEW" << std::endl;
        return -1;
    }

    glEnable(GL_DEPTH_TEST);

    // Inicializar malla y OpenGL
    initializeMesh();
    initializeOpenGL();

    // Bucle principal
    while (!glfwWindowShouldClose(window)) {
        renderMesh();
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // Limpiar
    glDeleteVertexArrays(1, &vao);
    glDeleteBuffers(1, &vbo);
    glfwDestroyWindow(window);
    glfwTerminate();

    return 0;
}